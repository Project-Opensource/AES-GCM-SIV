#ifndef EXAMPLE_H
# define EXAMPLE_H

# include <stddef.h>
# include <stdint.h>

# if defined(AES256) && defined(O32_EX)

/* AES key */
const unsigned char gcm_key[] = {
    0x65, 0x45, 0xfc, 0x88, 0x0c, 0x94, 0xa9, 0x51, 0x98, 0x87, 0x42, 0x96, 
    0xd5, 0xcc, 0x1f, 0xd1, 0x61, 0x32, 0x0b, 0x69, 0x20, 0xce, 0x07, 0x78, 
    0x7f, 0x86, 0x74, 0x3b, 0x27, 0x5d, 0x1a, 0xb3
};

/* Unique initialisation vector */
const unsigned char gcm_iv[] = {
    0x2f, 0x6d, 0x1f, 0x04, 0x34, 0xd8, 0x84, 0x8c, 0x11, 0x77, 0x44, 0x1f
};

/* Example plaintext to encrypt */
const unsigned char gcm_pt[] = {
    0x19, 0x54, 0x95, 0x86, 0x0f, 0x04
};

/*
 * Example of Additional Authenticated Data (AAD), i.e. unencrypted data
 * which can be authenticated using the generated Tag value.
 */
const unsigned char gcm_aad[] = {
    0x67, 0x87, 0xf3, 0xea, 0x22, 0xc1, 0x27, 0xaa, 0xf1, 0x95
};

const unsigned char gcm_ct[] = {
    0xa2, 0x54, 0xda, 0xd4, 0xf3, 0xf9, 0x6b, 0x62, 0xb8, 0x4d, 0xc4, 0x0c, 
    0x84, 0x63, 0x6a, 0x5e, 0xc1, 0x20, 0x20, 0xec, 0x8c, 0x2c
};

/* Expected AEAD Tag value */
const unsigned char gcm_tag[] = {
    0x6b, 0x62, 0xb8, 0x4d, 0xc4, 0x0c, 0x84, 0x63, 0x6a, 0x5e, 0xc1, 0x20, 
    0x20, 0xec, 0x8c, 0x2c
};

# elif defined(AES256) && defined(O32_CWT1)

/* AES key */
const unsigned char gcm_key[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* Unique initialisation vector */
const unsigned char gcm_iv[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* Example plaintext to encrypt */
const unsigned char gcm_pt[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x4d, 0xb9, 0x23, 0xdc, 0x79, 0x3e, 0xe6, 0x49, 
    0x7c, 0x76, 0xdc, 0xc0, 0x3a, 0x98, 0xe1, 0x08
};

/*
 * Example of Additional Authenticated Data (AAD), i.e. unencrypted data
 * which can be authenticated using the generated Tag value.
 */
const unsigned char gcm_aad[0];

// RFC error value
const unsigned char gcm_ct[] = {
    0xf3, 0xf8, 0x0f, 0x2c, 0xf0, 0xcb, 0x2d, 0xd9, 0xc5, 0x98, 0x4f, 0xcd, 
    0xa9, 0x08, 0x45, 0x6c, 0xc5, 0x37, 0x70, 0x3b, 0x5b, 0xa7, 0x03, 0x24, 
    0xa6, 0x79, 0x3a, 0x7b, 0xf2, 0x18, 0xd3, 0xea, 0xff, 0xff, 0xff, 0xff, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* Expected AEAD Tag value */
const unsigned char gcm_tag[] = {
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00
};

# elif defined(AES256) && defined(O32_CWT2)

/* AES key */
const unsigned char gcm_key[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* Unique initialisation vector */
const unsigned char gcm_iv[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* Example plaintext to encrypt */
const unsigned char gcm_pt[] = {
    0xeb, 0x36, 0x40, 0x27, 0x7c, 0x7f, 0xfd, 0x13, 0x03, 0xc7, 0xa5, 0x42, 
    0xd0, 0x2d, 0x3e, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*
 * Example of Additional Authenticated Data (AAD), i.e. unencrypted data
 * which can be authenticated using the generated Tag value.
 */
const unsigned char gcm_aad[0];

// RFC error value
const unsigned char gcm_ct[] = {
    0x18, 0xce, 0x4f, 0x0b, 0x8c, 0xb4, 0xd0, 0xca, 0xc6, 0x5f, 0xea, 0x8f, 
    0x79, 0x25, 0x7b, 0x20, 0x88, 0x8e, 0x53, 0xe7, 0x22, 0x99, 0xe5, 0x6d, 
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00
};

/* Expected AEAD Tag value */
const unsigned char gcm_tag[] = {
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00
};

# elif PT_ZEROS

/* AES key */
const unsigned char gcm_key[] = {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00
};

/* Unique initialisation vector */
const unsigned char gcm_iv[] = {
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* Example plaintext to encrypt */
const unsigned char gcm_pt[0];

/*
 * Example of Additional Authenticated Data (AAD), i.e. unencrypted data
 * which can be authenticated using the generated Tag value.
 */
const unsigned char gcm_aad[0];

const unsigned char gcm_ct[] = {
    0xdc, 0x20, 0xe2, 0xd8, 0x3f, 0x25, 0x70, 0x5b, 0xb4, 0x9e, 0x43, 0x9e, 
    0xca, 0x56, 0xde, 0x25
};

/* Expected AEAD Tag value */
const unsigned char gcm_tag[] = {
    0xdc, 0x20, 0xe2, 0xd8, 0x3f, 0x25, 0x70, 0x5b, 0xb4, 0x9e, 0x43, 0x9e, 
    0xca, 0x56, 0xde, 0x25
};

# elif PT_ZERO_AAD

/* AES key */
const unsigned char gcm_key[] = {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00
};

/* Unique initialisation vector */
const unsigned char gcm_iv[] = {
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};

/* Example plaintext to encrypt */
const unsigned char gcm_pt[] = {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*
 * Example of Additional Authenticated Data (AAD), i.e. unencrypted data
 * which can be authenticated using the generated Tag value.
 */
const unsigned char gcm_aad[0];

const unsigned char gcm_ct[] = {
    0xb5, 0xd8, 0x39, 0x33, 0x0a, 0xc7, 0xb7, 0x86, 0x57, 0x87, 0x82, 0xff, 
    0xf6, 0x01, 0x3b, 0x81, 0x5b, 0x28, 0x7c, 0x22, 0x49, 0x3a, 0x36, 0x4c 
};

/* Expected AEAD Tag value */
const unsigned char gcm_tag[] = {
    0x57, 0x87, 0x82, 0xff, 0xf6, 0x01, 0x3b, 0x81, 0x5b, 0x28, 0x7c, 0x22, 
    0x49, 0x3a, 0x36, 0x4c
};

# elif PT_64
// Plaintext 64 bits

/* AES key */
const unsigned char gcm_key[] = {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

/* Unique initialisation vector */
const unsigned char gcm_iv[] = {
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* Example plaintext to encrypt */
const unsigned char gcm_pt[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

/*
 * Example of Additional Authenticated Data (AAD), i.e. unencrypted data
 * which can be authenticated using the generated Tag value.
 */
const unsigned char gcm_aad[] = {
    0x01
};

// Error in RFC 8452
const unsigned char gcm_ct[] = {
    0x2f, 0x5c, 0x64, 0x05, 0x9d, 0xb5, 0x5e, 0xe0, 0xfb, 0x84, 0x7e, 0xd5, 
    0x13, 0x00, 0x37, 0x46, 0xac, 0xa4, 0xe6, 0x1c, 0x71, 0x1b, 0x5d, 0xe2, 
    0xe7, 0xa7, 0x7f, 0xfd, 0x02, 0xda, 0x42, 0xfe, 0xec, 0x60, 0x19, 0x10, 
    0xd3, 0x46, 0x7b, 0xb8, 0xb3, 0x6e, 0xbb, 0xae, 0xbc, 0xe5, 0xfb, 0xa3, 
    0x0d, 0x36, 0xc9, 0x5f, 0x48, 0xa3, 0xe7, 0x98, 0x0f, 0x0e, 0x7a, 0xc2, 
    0x99, 0x33, 0x2a, 0x80, 0xcd, 0xc4, 0x6a, 0xe4, 0x75, 0x56, 0x3d, 0xe0, 
    0x37, 0x00, 0x1e, 0xf8, 0x4a, 0xe2, 0x17, 0x44
};

/* Expected AEAD Tag value */
const unsigned char gcm_tag[] = {
    0xcd, 0xc4, 0x6a, 0xe4, 0x75, 0x56, 0x3d, 0xe0, 0x37, 0x00, 0x1e, 0xf8, 
	0x4a, 0xe2, 0x17, 0x44
};

# else

/* AES key */
const unsigned char gcm_key[] = {
    0xee, 0x8e, 0x1e, 0xd9, 0xff, 0x25, 0x40, 0xae, 0x8f, 0x2b, 0xa9, 0xf5, 
    0x0b, 0xc2, 0xf2, 0x7c
};

/* Unique initialisation vector */
const unsigned char gcm_iv[] = {
    0x75, 0x2a, 0xba, 0xd3, 0xe0, 0xaf, 0xb5, 0xf4, 0x34, 0xdc, 0x43, 0x10
};

/* Example plaintext to encrypt */
const unsigned char gcm_pt[] = {
    0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64
};

/*
 * Example of Additional Authenticated Data (AAD), i.e. unencrypted data
 * which can be authenticated using the generated Tag value.
 */
const unsigned char gcm_aad[] = {
    0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65
};

/* Expected ciphertext value */
const unsigned char gcm_ct[] = {
    0x5d, 0x34, 0x9e, 0xad, 0x17, 0x5e, 0xf6, 0xb1, 0xde, 0xf6, 0xfd, 0x4f, 
    0xbc, 0xde, 0xb7, 0xe4, 0x79, 0x3f, 0x4a, 0x1d, 0x7e, 0x4f, 0xaa, 0x70, 
    0x10, 0x0a, 0xf1
};

/* Expected AEAD Tag value */
const unsigned char gcm_tag[] = {
    0x4f, 0xbc, 0xde, 0xb7, 0xe4, 0x79, 0x3f, 0x4a, 0x1d, 0x7e, 0x4f, 0xaa, 
    0x70, 0x10, 0x0a, 0xf1
};
# endif

#endif